1. stoi() = string to integer conversion

string str = "456";
int num = stoi(str);

cout << "integer : " << num << endl;
cout << "string : " << str << endl;


2.printing zeroes after decimal point 

double d = 1e20;
cout << fixed << setprecision(25) << d ;

output : 100000000000000000000.0000000000000000000000000

double  d = 1e9;
cout << fixed << setprecision(15) << d ;

output :  1000000000.000000000000000

3. to prevent segmentation fault , always declare the size of vectors

        vector<int>v(n-1);
        vector<int>v(n);

4. Sum of 1st "n" natural numbers from 0 to n-1 is (n * (n-1)) / 2

5. sorting in a string

    string s = "monkey";
    sort(s.begin(), s.end());
    cout << s ; --> ekmnoy

    string s = "pranavkarne";
    sort(s.begin(), s.end());
    cout << s ;  --> aaaeknnprrv

6. An ordinary array can be sorted as follows:

    int n = 7; 
    int a[] = {4,2,5,3,5,8,3};
    sort(a,a+n);
    for(auto it : a) cout << it << " " ;  --> 2 3 3 4 5 5 8 

7. Vector sorting

vector<int> v = {4,2,5,3,5,8,3};
sort(v.begin(),v.end());  -> increasing order sorting
for(auto it : v) cout << it << " " ; --> 2 3 3 4 5 5 8 

8.  vector<int> v = {4,2,5,3,5,8,3};
    sort(v.rbegin(),v.rend());  --> decreasing order  sorting
    for(auto it : v) cout << it << " " ; --> 8 5 5 4 3 3 2 


9. to prevent overflow (-ve numbers come) of integer values use long long int , even for vectors or for normal int

int n = 45;
long long int ;
vector<long long >v;

10.when string length is  1 in the problem statment

use (int)s.length() - 1 ;


11. no of permutations for a number n =  n! 


12.while printing permutations make sure the string  is sorted or 
else all the permutations wont be printed

string s = "pranavkarne";
sort(s.begin() , s.end());

do
{   
    cout << s << '\n';
}
while (next_permutation(s.begin(),s.end()));


13. how to find max element in an array/vector

    vector<int>v = {4,5,6,23,23,242,4};
    int max_elemen = *max_element(v.begin() , v.end());
    cout << max_elemen << '\n' ;

14. Input for 2D Array 

int matrix[3][3];
for (int i = 0; i < 3; ++i)
    for (int j = 0; j < 3; ++j)
        cin >> matrix[i][j];

15. summation of matrix 

int sum[101][101];
    for(int i = 0 ; i < R ; i++){
        for(int j = 0 ; j < C ; j++){
            sum[i][j] = A[i][j] + B[i][j];
        }
    }


    for(int i = 0 ; i < R ; i++){
        for(int j = 0 ; j < C ; j++){
            cout << sum[i][j] << " ";
        }
        cout << endl;
    }


16.how to print the complete pair or pair of vectors

void printVectorOfPairs(vector<pair<int, int>>&vec) {
    for(auto p : vec) {
        cout << "(" << p.first << ", " << p.second << ") ";
    }
}

int main() {
    vector<pair<int, int>> arr = {{1,2},{1,4},{5,6}};
    printVectorOfPairs(arr);
    return 0;
}

17. PnC  

nCr = n!/(r! * (n-r)!)

nCr == nCn-r

for recursion use this :
C(n,r)=C(n−1,r−1)+C(n−1,r)

int combination(int N , int R)
{
    if(N==R || R==0) return 1;
    if(N<R) return 0;
    return combination(N-1,R) + combination(N-1,R-1);

}


18. sum of an array using recursion


int sum_total(int sum , int arr[] , int n , int i )
{    
    if(i > n - 1)
    {    
        return sum ;
    }
    return sum_total(sum + arr[i] , arr , n , i+1);

}

19. long long 


Handling large numbers: up to 10^18

Big multiplications

Modulo arithmetic (a * b % mod)

Prefix sums with large values

n * (n+1)/2 when n is big

Any value that might go beyond 2^31




















